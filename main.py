#!/usr/bin/env python3
import os
import logging
import subprocess
import shutil
import asyncio
import time
import math
import json
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler

#—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤
from dotenv import load_dotenv
#–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞
load_dotenv()
token = os.getenv('TOKEN')
admin_id = os.getenv('ADMIN_ID')
#–ù–∞—Å—Ç—Ä–æ–π–∫–∏
BOT_TOKEN = token

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
# logging.basicConfig(
#     format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
#     level=logging.INFO
# )
logger = logging.getLogger(__name__)

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

# –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
SUPPORTED_PLATFORMS = {
    'vk.com': 'VK Video',
    'vkvideo.ru': 'VK Video',
    'rutube.ru': 'Rutube'
}


async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await update.message.reply_text(
        "ü§ñ –ë–æ—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ\n\n"
        "üìπ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã:\n"
        "‚Ä¢ VK Video\n‚Ä¢ Vimeo\n‚Ä¢ Dailymotion\n‚Ä¢ Instagram\n‚Ä¢ Twitter\n‚Ä¢ TikTok\n"
        "‚Ä¢ Rutube\n‚Ä¢ Twitch\n‚Ä¢ Bilibili\n\n"
        "üíæ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –≤–∏–¥–µ–æ\n"
        "üé¨ –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞–∫ –≤–∏–¥–µ–æ —Å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º –ø–ª–µ–µ—Ä–æ–º\n"
        "üîÑ –°–∂–∞—Ç–∏–µ –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤\n\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ!"
    )


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    platforms_list = "\n".join([f"‚Ä¢ {name}" for name in SUPPORTED_PLATFORMS.values()])

    await update.message.reply_text(
        f"üìñ –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞:\n\n"
        f"1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ\n"
        f"2. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ\n"
        f"3. –î–æ–∂–¥–∏—Ç–µ—Å—å —Å–∫–∞—á–∏–≤–∞–Ω–∏—è\n"
        f"4. –ü–æ—Å–ª–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ\n\n"
        f"üìπ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã:\n{platforms_list}\n\n"
        f"üé¨ –í–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —Å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º –ø–ª–µ–µ—Ä–æ–º\n"
        f"üíæ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏ —Å–∂–∞—Ç–∏–µ\n"
        f"‚úÇÔ∏è –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤ –Ω–∞ —á–∞—Å—Ç–∏\n"
        f"üìÅ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ª–∏—á–Ω–æ–π –ø–∞–ø–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        f"‚ö†Ô∏è YouTube –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è\n"
        f"üóëÔ∏è –§–∞–π–ª—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è—é—Ç—Å—è —á–µ—Ä–µ–∑ 1 —á–∞—Å"
    )


async def platforms_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º"""
    platforms_list = "\n".join([f"‚Ä¢ {name}" for name in sorted(set(SUPPORTED_PLATFORMS.values()))])

    await update.message.reply_text(
        f"üìπ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã:\n\n{platforms_list}\n\n"
        f"üîó –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É —Å –ª—é–±–æ–π –∏–∑ —ç—Ç–∏—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º!\n\n"
        f"‚ö†Ô∏è YouTube –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è"
    )


def is_supported_platform(url: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞"""
    return any(domain in url for domain in SUPPORTED_PLATFORMS.keys())


def get_platform_name(url: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –ø–æ URL"""
    for domain, name in SUPPORTED_PLATFORMS.items():
        if domain in url:
            return name
    return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞"


async def handle_video_url(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Å—ã–ª–æ–∫ –Ω–∞ –≤–∏–¥–µ–æ"""
    url = update.message.text.strip()
    user_id = update.message.from_user.id
    username = update.message.from_user.username or f"user_{user_id}"

    logger.info(f"User {user_id} ({username}) requested: {url}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å—Å—ã–ª–∫–∞
    if not url.startswith(('http://', 'https://')):
        await update.message.reply_text("‚ùå –≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å—Å—ã–ª–∫—É. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
    if not is_supported_platform(url):
        await update.message.reply_text(
            "‚ùå –≠—Ç–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è\n\n"
            "üìπ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /platforms —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º.\n\n"
        )
        return

    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–º–µ–Ω—ã URL –¥–ª—è –ª—É—á—à–µ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    url = normalize_url(url)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º URL –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data[user_id] = {
        'url': url,
        'step': 'quality_selection',
        'platform': get_platform_name(url),
        'username': username
    }

    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ
    keyboard = [
        [
            InlineKeyboardButton("üé• –õ—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ", callback_data="quality_best"),
            InlineKeyboardButton("‚öñÔ∏è –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ", callback_data="quality_720")
        ],
        [
            InlineKeyboardButton("üì± –î–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (480p)", callback_data="quality_480"),
            InlineKeyboardButton("üéµ –¢–æ–ª—å–∫–æ –∞—É–¥–∏–æ", callback_data="quality_audio")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    platform_name = get_platform_name(url)
    await update.message.reply_text(
        f"üé¨ –°—Å—ã–ª–∫–∞ —Å {platform_name} –ø—Ä–∏–Ω—è—Ç–∞!\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ:",
        reply_markup=reply_markup
    )


def normalize_url(url: str) -> str:
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç URL –¥–ª—è –ª—É—á—à–µ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
    # –ó–∞–º–µ–Ω—è–µ–º vkvideo.ru –Ω–∞ vk.com
    if 'vkvideo.ru' in url:
        url = url.replace('vkvideo.ru', 'vk.com')

    # –ó–∞–º–µ–Ω—è–µ–º x.com –Ω–∞ twitter.com
    if 'x.com' in url:
        url = url.replace('x.com', 'twitter.com')

    return url


async def handle_quality_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—á–µ—Å—Ç–≤–∞"""
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    quality = query.data.replace('quality_', '')

    if user_id not in user_data:
        await query.edit_message_text("‚ùå –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –∑–∞–Ω–æ–≤–æ.")
        return

    url = user_data[user_id]['url']
    platform = user_data[user_id]['platform']
    user_data[user_id]['quality'] = quality
    user_data[user_id]['step'] = 'downloading'

    quality_names = {
        'best': '–ª—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ',
        '720': '720p (HD)',
        '480': '480p',
        'audio': '—Ç–æ–ª—å–∫–æ –∞—É–¥–∏–æ'
    }

    await query.edit_message_text(
        f"‚è¨ –ù–∞—á–∏–Ω–∞—é —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Å {platform}...\n"
        f"üíæ –ö–∞—á–µ—Å—Ç–≤–æ: {quality_names.get(quality, quality)}\n"
        f"‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç..."
    )

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
    asyncio.create_task(download_video(user_id, url, quality, context))


async def download_video(user_id: int, url: str, quality: str, context: ContextTypes.DEFAULT_TYPE):
    """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ"""
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_dir = f"/home/taras/video_downloads/user_{user_id}"
        os.makedirs(user_dir, exist_ok=True)

        # –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
        quality_presets = {
            'best': {
                'format': 'best[height<=1080]/best',
                'description': '–õ—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ (–¥–æ 1080p)'
            },
            '720': {
                'format': 'best[height<=720]/best',
                'description': 'HD –∫–∞—á–µ—Å—Ç–≤–æ (720p)'
            },
            '480': {
                'format': 'best[height<=480]/best',
                'description': '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ (480p)'
            },
            'audio': {
                'format': 'bestaudio/best',
                'description': '–¢–æ–ª—å–∫–æ –∞—É–¥–∏–æ',
                'audio_params': ['-x', '--audio-format', 'mp3', '--audio-quality', '5']
            }
        }

        preset = quality_presets.get(quality, quality_presets['best'])
        format_selection = preset['format']

        # –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        cmd = [
            "yt-dlp",
            "-o", f"{user_dir}/%(title)s.%(ext)s",
            "-f", format_selection,
            "--no-warnings",
            "--user-agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36",
            "--retries", "3",
            "--fragment-retries", "3",
            "--socket-timeout", "30",
            url
        ]

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∞—É–¥–∏–æ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if quality == 'audio' and 'audio_params' in preset:
            cmd.extend(preset['audio_params'])

        logger.info(f"–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: {' '.join(cmd)}")

        # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
        result = subprocess.run(cmd, capture_output=True, text=True, timeout=600)

        if result.returncode == 0:
            # –ò—â–µ–º —Å–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
            files = os.listdir(user_dir)
            if files:
                latest_file = max([os.path.join(user_dir, f) for f in files], key=os.path.getctime)

                user_data[user_id]['file_path'] = latest_file
                user_data[user_id]['step'] = 'downloaded'

                file_size = os.path.getsize(latest_file) / (1024 * 1024)
                file_name = os.path.basename(latest_file)

                # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ—Å–ª–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                keyboard = [
                    [
                        InlineKeyboardButton("üé¨ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ", callback_data="action_send"),
                        InlineKeyboardButton("üìÅ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ", callback_data="action_move")
                    ],
                    [
                        InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª", callback_data="action_delete")
                    ]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)

                await context.bot.send_message(
                    chat_id=user_id,
                    text=f"‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–æ!\n\n"
                         f"üìπ –§–∞–π–ª: `{file_name}`\n"
                         f"üìä –†–∞–∑–º–µ—Ä: {file_size:.2f} MB\n"
                         f"üíæ –ö–∞—á–µ—Å—Ç–≤–æ: {preset['description']}\n\n"
                         f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    reply_markup=reply_markup,
                    parse_mode='Markdown'
                )

                # –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 1 —á–∞—Å
                asyncio.create_task(schedule_file_deletion(user_id, latest_file, 3600))
            else:
                await context.bot.send_message(
                    chat_id=user_id,
                    text="‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è"
                )
        else:
            error_msg = result.stderr if result.stderr else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"

            # –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
            error_message = await parse_error_message(error_msg, user_data[user_id]['platform'])

            await context.bot.send_message(
                chat_id=user_id,
                text=error_message
            )

    except subprocess.TimeoutExpired:
        await context.bot.send_message(
            chat_id=user_id,
            text="‚ùå –¢–∞–π–º–∞—É—Ç —Å–∫–∞—á–∏–≤–∞–Ω–∏—è (10 –º–∏–Ω—É—Ç)\n\n"
                 "–í–æ–∑–º–æ–∂–Ω–æ, –≤–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –∏–ª–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ."
        )
    except Exception as e:
        await context.bot.send_message(
            chat_id=user_id,
            text=f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:\n`{str(e)}`\n\n"
                 "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é —Å—Å—ã–ª–∫—É –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode='Markdown'
        )


async def parse_error_message(error: str, platform: str) -> str:
    """–ü–∞—Ä—Å–∏—Ç –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö"""
    error_lower = error.lower()

    if "private" in error_lower or "login" in error_lower:
        return f"‚ùå –í–∏–¥–µ–æ —Å {platform} –ø—Ä–∏–≤–∞—Ç–Ω–æ–µ –∏–ª–∏ —Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏\n\n–î–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –Ω—É–∂–µ–Ω –¥–æ—Å—Ç—É–ø –∫ –∞–∫–∫–∞—É–Ω—Ç—É."

    elif "geo" in error_lower or "region" in error_lower or "country" in error_lower:
        return f"‚ùå –í–∏–¥–µ–æ —Å {platform} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –≤ –≤–∞—à–µ–º —Ä–µ–≥–∏–æ–Ω–µ\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ VPN –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –≤–∏–¥–µ–æ."

    elif "removed" in error_lower or "deleted" in error_lower or "unavailable" in error_lower:
        return f"‚ùå –í–∏–¥–µ–æ —Å {platform} –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ"

    elif "too large" in error_lower or "size" in error_lower:
        return "‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –º–µ–Ω—å—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ."

    else:
        return f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Å {platform}:\n`{error[:500]}`\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é —Å—Å—ã–ª–∫—É."


async def optimize_video_for_telegram(input_path: str, output_path: str = None) -> str:
    """
    –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –≤–∏–¥–µ–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:
    - –°–∂–∏–º–∞–µ—Ç –¥–æ 720p
    - –£–º–µ–Ω—å—à–∞–µ—Ç –±–∏—Ç—Ä–µ–π—Ç
    - –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    - –£–¥–∞–ª—è–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    """
    if output_path is None:
        output_path = f"{input_path}_optimized.mp4"

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∏—Å—Ö–æ–¥–Ω–æ–º –≤–∏–¥–µ–æ
        probe_cmd = [
            "ffprobe", "-v", "quiet", "-print_format", "json",
            "-show_format", "-show_streams", input_path
        ]

        result = subprocess.run(probe_cmd, capture_output=True, text=True)
        video_info = json.loads(result.stdout)

        # –ù–∞—Ö–æ–¥–∏–º –≤–∏–¥–µ–æ –ø–æ—Ç–æ–∫
        video_stream = next((s for s in video_info['streams'] if s['codec_type'] == 'video'), None)

        if not video_stream:
            return input_path  # –ù–µ —Å–º–æ–≥–ª–∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª

        original_height = int(video_stream.get('height', 1080))
        original_bitrate = int(video_info['format'].get('bit_rate', 0)) / 1000  # kbps

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–ª—è Telegram
        target_height = min(720, original_height)  # –ú–∞–∫—Å–∏–º—É–º 720p
        target_bitrate = "2000k"  # –¶–µ–ª–µ–≤–æ–π –±–∏—Ç—Ä–µ–π—Ç
        max_bitrate = "2500k"  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∏—Ç—Ä–µ–π—Ç
        buffer_size = "5000k"  # –†–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞

        # –ï—Å–ª–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ —É–∂–µ –º–µ–Ω—å—à–µ –Ω–∞—à–∏—Ö —Ü–µ–ª–µ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, –Ω–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º
        if original_height <= 720 and (original_bitrate <= 2500 or original_bitrate == 0):
            logger.info("–í–∏–¥–µ–æ —É–∂–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∂–∞—Ç–∏–µ")
            return input_path

        logger.info(f"–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –≤–∏–¥–µ–æ: {original_height}p -> {target_height}p, –±–∏—Ç—Ä–µ–π—Ç ~{target_bitrate}")

        # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        cmd = [
            "ffmpeg", "-i", input_path,
            "-c:v", "libx264",  # –ö–æ–¥–µ–∫ H.264
            "-preset", "medium",  # –ë–∞–ª–∞–Ω—Å —Å–∫–æ—Ä–æ—Å—Ç—å/–∫–∞—á–µ—Å—Ç–≤–æ
            "-crf", "23",  # –ö–∞—á–µ—Å—Ç–≤–æ (23 - —Ö–æ—Ä–æ—à–∏–π –±–∞–ª–∞–Ω—Å)
            "-maxrate", max_bitrate,  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∏—Ç—Ä–µ–π—Ç
            "-bufsize", buffer_size,  # –†–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞
            "-vf", f"scale=-2:{target_height}",  # –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ –≤—ã—Å–æ—Ç–µ
            "-c:a", "aac",  # –ê—É–¥–∏–æ –∫–æ–¥–µ–∫
            "-b:a", "128k",  # –ê—É–¥–∏–æ –±–∏—Ç—Ä–µ–π—Ç
            "-ac", "2",  # –°—Ç–µ—Ä–µ–æ –∑–≤—É–∫
            "-movflags", "+faststart",  # –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç –¥–ª—è —Å—Ç—Ä–∏–º–∏–Ω–≥–∞
            "-map_metadata", "-1",  # –£–¥–∞–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            "-y",  # –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –≤—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
            output_path
        ]

        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é
        result = subprocess.run(cmd, capture_output=True, text=True, timeout=600)

        if result.returncode == 0 and os.path.exists(output_path):
            original_size = os.path.getsize(input_path) / (1024 * 1024)
            optimized_size = os.path.getsize(output_path) / (1024 * 1024)
            compression_ratio = (1 - optimized_size / original_size) * 100

            logger.info(
                f"–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {original_size:.1f}MB -> {optimized_size:.1f}MB ({compression_ratio:.1f}% —Å–∂–∞—Ç–∏—è)")

            # –ï—Å–ª–∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª —Å—Ç–∞–ª –±–æ–ª—å—à–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª
            if optimized_size >= original_size:
                os.remove(output_path)
                return input_path

            return output_path
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {result.stderr}")
            return input_path

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –≤–∏–¥–µ–æ: {e}")
        return input_path


async def create_thumbnail(video_path: str) -> str:
    """–°–æ–∑–¥–∞–µ—Ç –º–∏–Ω–∏–∞—Ç—é—Ä—É –¥–ª—è –≤–∏–¥–µ–æ"""
    try:
        thumbnail_path = f"{video_path}_thumb.jpg"

        cmd = [
            "ffmpeg", "-i", video_path,
            "-ss", "00:00:05",  # –ë–µ—Ä–µ–º –∫–∞–¥—Ä –Ω–∞ 5-–π —Å–µ–∫—É–Ω–¥–µ
            "-vframes", "1",  # –¢–æ–ª—å–∫–æ –æ–¥–∏–Ω –∫–∞–¥—Ä
            "-q:v", "2",  # –ö–∞—á–µ—Å—Ç–≤–æ JPEG
            thumbnail_path
        ]

        result = subprocess.run(cmd, capture_output=True, text=True, timeout=30)

        if result.returncode == 0 and os.path.exists(thumbnail_path):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –º–∏–Ω–∏–∞—Ç—é—Ä—ã (Telegram limit 200KB)
            thumb_size = os.path.getsize(thumbnail_path) / 1024  # KB
            if thumb_size > 190:  # –û—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∞—Å
                # –£–º–µ–Ω—å—à–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–æ
                cmd_compress = [
                    "ffmpeg", "-i", thumbnail_path,
                    "-q:v", "5",  # –ë–æ–ª–µ–µ —Å–∏–ª—å–Ω–æ–µ —Å–∂–∞—Ç–∏–µ
                    f"{thumbnail_path}_compressed.jpg"
                ]
                subprocess.run(cmd_compress, capture_output=True, timeout=10)
                os.replace(f"{thumbnail_path}_compressed.jpg", thumbnail_path)

            return thumbnail_path

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–∏–Ω–∏–∞—Ç—é—Ä—ã: {e}")

    return None


async def handle_send_action(query, context, user_id, file_path):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ –∫–∞–∫ –≤–∏–¥–µ–æ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π"""
    try:
        original_size = os.path.getsize(file_path) / (1024 * 1024)  # MB

        # –†–µ–∞–ª—å–Ω—ã–µ –ª–∏–º–∏—Ç—ã Telegram –¥–ª—è –±–æ—Ç–æ–≤
        if original_size > 45:
            await handle_large_file(query, context, user_id, file_path, original_size)
            return

        await query.edit_message_text("üîÑ –û–ø—Ç–∏–º–∏–∑–∏—Ä—É—é –≤–∏–¥–µ–æ –¥–ª—è Telegram...")

        # –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –≤–∏–¥–µ–æ
        optimized_path = await optimize_video_for_telegram(file_path)
        optimized_size = os.path.getsize(optimized_path) / (
                    1024 * 1024) if optimized_path != file_path else original_size

        if optimized_path != file_path:
            await query.edit_message_text(
                f"‚úÖ –í–∏–¥–µ–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {original_size:.1f}MB ‚Üí {optimized_size:.1f}MB\nüé¨ –û—Ç–ø—Ä–∞–≤–ª—è—é...")

        # –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–∞—Ç—é—Ä—É
        thumbnail_path = await create_thumbnail(optimized_path)

        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ –≤–∏–¥–µ–æ
            with open(optimized_path, 'rb') as video_file:
                await context.bot.send_video(
                    chat_id=user_id,
                    video=video_file,
                    caption=f"üìπ {os.path.basename(file_path)}\n"
                            f"üìä {optimized_size:.1f} MB{' (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ)' if optimized_path != file_path else ''}",
                    thumbnail=thumbnail_path,
                    supports_streaming=True,
                    read_timeout=60,
                    write_timeout=60,
                    connect_timeout=60
                )

            success_message = "‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!"
            if optimized_path != file_path:
                compression_ratio = (1 - optimized_size / original_size) * 100
                success_message += f"\nüíæ –°–∂–∞—Ç–∏–µ: {original_size:.1f}MB ‚Üí {optimized_size:.1f}MB ({compression_ratio:.1f}%)"

            await query.edit_message_text(success_message)

        except Exception as send_error:
            # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –∫–∞–∫ –≤–∏–¥–µ–æ, –ø—Ä–æ–±—É–µ–º –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç
            error_msg = str(send_error)
            if "413" in error_msg or "Request Entity Too Large" in error_msg or "400" in error_msg:
                await query.edit_message_text("üîÑ –í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ, –ø—Ä–æ–±—É—é –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ —Ñ–∞–π–ª...")
                await send_as_document(query, context, user_id, optimized_path)
            else:
                raise send_error

        finally:
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            if thumbnail_path and os.path.exists(thumbnail_path):
                os.remove(thumbnail_path)
            if optimized_path != file_path and os.path.exists(optimized_path):
                os.remove(optimized_path)  # –£–¥–∞–ª—è–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–æ–ø–∏—é
            if os.path.exists(file_path):
                os.remove(file_path)  # –£–¥–∞–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª
            if user_id in user_data:
                del user_data[user_id]

    except Exception as e:
        await handle_send_error(query, e, original_size)


async def handle_large_file(query, context, user_id, file_path, file_size):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤"""
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
    keyboard = [
        [
            InlineKeyboardButton("üîÑ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data=f"optimize_{user_id}"),
            InlineKeyboardButton("‚úÇÔ∏è –†–∞–∑–¥–µ–ª–∏—Ç—å –Ω–∞ —á–∞—Å—Ç–∏", callback_data=f"split_{user_id}")
        ],
        [
            InlineKeyboardButton("üìÅ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ", callback_data="action_move"),
            InlineKeyboardButton("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å", callback_data="action_send_as_file")
        ],
        [
            InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª", callback_data="action_delete")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(
        f"üìπ –í–∏–¥–µ–æ –±–æ–ª—å—à–æ–µ ({file_size:.1f} MB)\n\n"
        f"üìä –õ–∏–º–∏—Ç Telegram: ~50 MB\n\n"
        f"üí° –í–∞—Ä–∏–∞–Ω—Ç—ã:\n"
        f"‚Ä¢ üîÑ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å (—Å–∂–∞—Ç—å —Ä–∞–∑–º–µ—Ä)\n"
        f"‚Ä¢ ‚úÇÔ∏è –†–∞–∑–¥–µ–ª–∏—Ç—å –Ω–∞ —á–∞—Å—Ç–∏\n"
        f"‚Ä¢ üìÅ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ\n"
        f"‚Ä¢ üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ —Ñ–∞–π–ª\n"
        f"‚Ä¢ üóëÔ∏è –£–¥–∞–ª–∏—Ç—å",
        reply_markup=reply_markup
    )


async def handle_optimize_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞"""
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id

    if user_id not in user_data or 'file_path' not in user_data[user_id]:
        await query.edit_message_text("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —Å–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞.")
        return

    file_path = user_data[user_id]['file_path']
    original_size = os.path.getsize(file_path) / (1024 * 1024)

    await query.edit_message_text(
        f"üîÑ –û–ø—Ç–∏–º–∏–∑–∏—Ä—É—é –≤–∏–¥–µ–æ...\n\n"
        f"üìπ –ò—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {original_size:.1f} MB\n"
        f"‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç..."
    )

    try:
        # –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –≤–∏–¥–µ–æ
        optimized_path = await optimize_video_for_telegram(file_path)
        optimized_size = os.path.getsize(optimized_path) / (1024 * 1024)

        if optimized_path == file_path:
            await query.edit_message_text(
                "‚ÑπÔ∏è –í–∏–¥–µ–æ —É–∂–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞\n"
                "–ü—Ä–æ–±—É—é –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å..."
            )
            await handle_send_action(query, context, user_id, file_path)
            return

        compression_ratio = (1 - optimized_size / original_size) * 100

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data[user_id]['file_path'] = optimized_path

        if optimized_size <= 45:
            await query.edit_message_text(
                f"‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
                f"üíæ –°–∂–∞—Ç–∏–µ: {original_size:.1f}MB ‚Üí {optimized_size:.1f}MB ({compression_ratio:.1f}%)\n"
                f"üé¨ –û—Ç–ø—Ä–∞–≤–ª—è—é –≤–∏–¥–µ–æ..."
            )
            await handle_send_action(query, context, user_id, optimized_path)
        else:
            await query.edit_message_text(
                f"‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
                f"üíæ –°–∂–∞—Ç–∏–µ: {original_size:.1f}MB ‚Üí {optimized_size:.1f}MB ({compression_ratio:.1f}%)\n"
                f"üìä –†–∞–∑–º–µ—Ä –≤—Å–µ –µ—â–µ –±–æ–ª—å—à–æ–π: {optimized_size:.1f}MB\n\n"
                f"üí° –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
            )
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
            await handle_large_file(query, context, user_id, optimized_path, optimized_size)

    except Exception as e:
        await query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:\n`{str(e)}`\n\n"
            f"üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–±.",
            parse_mode='Markdown'
        )


async def send_as_document(query, context, user_id, file_path):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç"""
    try:
        file_size = os.path.getsize(file_path) / (1024 * 1024)

        with open(file_path, 'rb') as file:
            await context.bot.send_document(
                chat_id=user_id,
                document=file,
                filename=os.path.basename(file_path),
                caption=f"üìÅ {os.path.basename(file_path)}\nüìä {file_size:.1f} MB"
            )

        await query.edit_message_text("‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")

        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
        try:
            os.remove(file_path)
            if user_id in user_data:
                del user_data[user_id]
        except:
            pass

    except Exception as e:
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞–∫ —Ñ–∞–π–ª: {str(e)}")


async def handle_send_as_file_action(query, context, user_id, file_path):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞–∫ —Ñ–∞–π–ª–∞"""
    await query.edit_message_text("üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –∫–∞–∫ —Ñ–∞–π–ª...")
    await send_as_document(query, context, user_id, file_path)


async def handle_send_error(query, error, file_size):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏"""
    error_msg = str(error)
    if "413" in error_msg or "Request Entity Too Large" in error_msg:
        await query.edit_message_text(
            f"‚ùå –í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –¥–ª—è Telegram ({file_size:.1f} MB)\n\n"
            f"üí° –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–∞–∑–¥–µ–ª–∏—Ç–µ –≤–∏–¥–µ–æ –Ω–∞ —á–∞—Å—Ç–∏ –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ."
        )
    elif "timed out" in error_msg.lower():
        await query.edit_message_text(
            "‚ùå –¢–∞–π–º–∞—É—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏\n\n"
            "üí° –í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ä–∞–∑–¥–µ–ª–∏—Ç—å –Ω–∞ —á–∞—Å—Ç–∏."
        )
    else:
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {str(error)}")


async def split_large_file(file_path: str, max_size_mb: int = 45):
    """–†–∞–∑–¥–µ–ª—è–µ—Ç –±–æ–ª—å—à–æ–π —Ñ–∞–π–ª –Ω–∞ —á–∞—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑—É—è ffmpeg"""
    try:
        file_size = os.path.getsize(file_path) / (1024 * 1024)  # MB
        if file_size <= max_size_mb:
            return [file_path]  # –ù–µ –Ω—É–∂–Ω–æ —Ä–∞–∑–¥–µ–ª—è—Ç—å

        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —á–∞—Å—Ç–µ–π
        base_name = os.path.splitext(file_path)[0]
        parts_dir = f"{base_name}_parts"
        os.makedirs(parts_dir, exist_ok=True)

        # –ü–æ–ª—É—á–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ
        duration_cmd = [
            "ffprobe", "-v", "error", "-show_entries", "format=duration",
            "-of", "default=noprint_wrappers=1:nokey=1", file_path
        ]

        result = subprocess.run(duration_cmd, capture_output=True, text=True)
        total_duration = float(result.stdout.strip())

        # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å—Ç–µ–π
        num_parts = max(2, math.ceil(file_size / max_size_mb))  # –ú–∏–Ω–∏–º—É–º 2 —á–∞—Å—Ç–∏
        part_duration = total_duration / num_parts

        part_files = []

        for i in range(num_parts):
            part_file = f"{parts_dir}/part_{i + 1:02d}.mp4"
            start_time = i * part_duration

            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –±–µ–∑ –ø–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
            cmd = [
                "ffmpeg", "-i", file_path,
                "-ss", str(start_time),
                "-t", str(part_duration),
                "-c", "copy",  # –ö–æ–ø–∏—Ä—É–µ–º –±–µ–∑ –ø–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
                "-avoid_negative_ts", "make_zero",
                part_file
            ]

            result = subprocess.run(cmd, capture_output=True, text=True, timeout=300)

            if result.returncode == 0 and os.path.exists(part_file):
                part_size = os.path.getsize(part_file) / (1024 * 1024)

                # –ï—Å–ª–∏ —á–∞—Å—Ç—å –≤—Å–µ –µ—â–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è, —É–º–µ–Ω—å—à–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–æ
                if part_size > max_size_mb:
                    os.remove(part_file)
                    cmd = [
                        "ffmpeg", "-i", file_path,
                        "-ss", str(start_time),
                        "-t", str(part_duration),
                        "-vf", "scale=854:480",  # –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –¥–æ 480p
                        "-c:v", "libx264", "-crf", "28",  # –ë–æ–ª–µ–µ —Å–∏–ª—å–Ω–æ–µ —Å–∂–∞—Ç–∏–µ
                        "-c:a", "aac", "-b:a", "96k",
                        "-preset", "fast",
                        part_file
                    ]
                    subprocess.run(cmd, capture_output=True, text=True, timeout=300)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä
                if os.path.exists(part_file):
                    final_size = os.path.getsize(part_file) / (1024 * 1024)
                    if final_size <= max_size_mb:
                        part_files.append(part_file)
                    else:
                        os.remove(part_file)

        return part_files if part_files else [file_path]

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
        return [file_path]


async def send_video_parts(chat_id, part_files, context, original_filename):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —á–∞—Å—Ç–∏ –≤–∏–¥–µ–æ –≤ Telegram"""
    total_parts = len(part_files)

    for i, part_file in enumerate(part_files):
        try:
            part_size = os.path.getsize(part_file) / (1024 * 1024)
            part_name = f"{original_filename}.part{i + 1:02d}.mp4"

            # –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–∞—Ç—é—Ä—É –¥–ª—è —á–∞—Å—Ç–∏
            thumbnail_path = await create_thumbnail(part_file)

            with open(part_file, 'rb') as video_file:
                await context.bot.send_video(
                    chat_id=chat_id,
                    video=video_file,
                    caption=f"üì¶ –ß–∞—Å—Ç—å {i + 1}/{total_parts}\n"
                            f"üìπ {original_filename}\n"
                            f"üìä {part_size:.1f} MB",
                    thumbnail=thumbnail_path,
                    supports_streaming=True,
                    read_timeout=60,
                    write_timeout=60,
                    connect_timeout=60
                )

            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            if thumbnail_path and os.path.exists(thumbnail_path):
                os.remove(thumbnail_path)
            os.remove(part_file)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–∞—Å—Ç–∏ {i + 1}: {e}")
            return False

    return True


async def handle_split_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –Ω–∞ —á–∞—Å—Ç–∏"""
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id

    if user_id not in user_data or 'file_path' not in user_data[user_id]:
        await query.edit_message_text("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —Å–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞.")
        return

    file_path = user_data[user_id]['file_path']
    original_filename = os.path.basename(file_path)
    file_size = os.path.getsize(file_path) / (1024 * 1024)

    await query.edit_message_text(
        f"‚úÇÔ∏è –†–∞–∑–¥–µ–ª—è—é –≤–∏–¥–µ–æ –Ω–∞ —á–∞—Å—Ç–∏...\n\n"
        f"üìπ –í–∏–¥–µ–æ: {original_filename}\n"
        f"üìä –†–∞–∑–º–µ—Ä: {file_size:.1f} MB\n"
        f"‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç..."
    )

    try:
        # –†–∞–∑–¥–µ–ª—è–µ–º —Ñ–∞–π–ª –Ω–∞ —á–∞—Å—Ç–∏
        part_files = await split_large_file(file_path, max_size_mb=45)

        if len(part_files) <= 1:
            await query.edit_message_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–¥–µ–ª–∏—Ç—å –≤–∏–¥–µ–æ\n\n"
                "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                "‚Ä¢ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–∏–¥–µ–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ\n"
                "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏"
            )
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞—Å—Ç–∏ –∫–∞–∫ –≤–∏–¥–µ–æ
        await query.edit_message_text(
            f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é {len(part_files)} —á–∞—Å—Ç–µ–π...\n"
            f"‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."
        )

        success = await send_video_parts(user_id, part_files, context, original_filename)

        if success:
            # –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª
            if os.path.exists(file_path):
                os.remove(file_path)

            # –£–¥–∞–ª—è–µ–º –ø–∞–ø–∫—É —Å —á–∞—Å—Ç—è–º–∏ –µ—Å–ª–∏ –æ–Ω–∞ –ø—É—Å—Ç–∞—è
            parts_dir = f"{os.path.splitext(file_path)[0]}_parts"
            if os.path.exists(parts_dir) and not os.listdir(parts_dir):
                os.rmdir(parts_dir)

            await query.edit_message_text(
                f"‚úÖ –í—Å–µ —á–∞—Å—Ç–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!\n\n"
                f"üì¶ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–∞—Å—Ç–µ–π: {len(part_files)}\n"
                f"üé¨ –í—Å–µ —á–∞—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∫–∞–∫ –≤–∏–¥–µ–æ\n"
                f"üí° –ú–æ–∂–Ω–æ —Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä—è–º–æ –≤ Telegram!"
            )
        else:
            await query.edit_message_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —á–∞—Å—Ç–µ–π\n\n"
                "üí° –ß–∞—Å—Ç—å –≤–∏–¥–µ–æ –º–æ–≥–ª–∞ –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è."
            )

        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id in user_data:
            del user_data[user_id]

    except Exception as e:
        await query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–∏ –≤–∏–¥–µ–æ:\n`{str(e)}`\n\n"
            f"üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–∏–¥–µ–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.",
            parse_mode='Markdown'
        )


async def handle_move_action(query, context, user_id, file_path):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –≤ –ø–∞–ø–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        username = user_data[user_id].get('username', f'user_{user_id}')
        user_saved_dir = f"/home/torrent/download/youtube/{username}"
        os.makedirs(user_saved_dir, exist_ok=True)

        # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ñ–∞–π–ª –≤ –ø–∞–ø–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        new_path = os.path.join(user_saved_dir, os.path.basename(file_path))

        # –ï—Å–ª–∏ —Ñ–∞–π–ª —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º —Å—É—Ñ—Ñ–∏–∫—Å
        counter = 1
        original_new_path = new_path
        while os.path.exists(new_path):
            name, ext = os.path.splitext(original_new_path)
            new_path = f"{name}_{counter}{ext}"
            counter += 1

        shutil.move(file_path, new_path)
        file_size = os.path.getsize(new_path) / (1024 * 1024)

        await query.edit_message_text(
            f"‚úÖ –í–∏–¥–µ–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –≤–∞—à–µ–π –ø–∞–ø–∫–µ!\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}\n"
            f"üìπ –§–∞–π–ª: `{os.path.basename(new_path)}`\n"
            f"üìä –†–∞–∑–º–µ—Ä: {file_size:.1f} MB\n"
            f"üìÇ –ü—É—Ç—å: `{new_path}`",
            parse_mode='Markdown'
        )
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç—å –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data[user_id]['file_path'] = new_path

    except Exception as e:
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {str(e)}")


async def handle_delete_action(query, context, user_id, file_path):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞"""
    try:
        if os.path.exists(file_path):
            os.remove(file_path)
            await query.edit_message_text("‚úÖ –í–∏–¥–µ–æ —É–¥–∞–ª–µ–Ω–æ —Å —Å–µ—Ä–≤–µ—Ä–∞")
        else:
            await query.edit_message_text("‚úÖ –§–∞–π–ª —É–∂–µ —É–¥–∞–ª–µ–Ω")

        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id in user_data:
            del user_data[user_id]
    except Exception as e:
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {str(e)}")


async def handle_post_download_actions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ—Å–ª–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è"""
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
    if query.data.startswith('split_'):
        await handle_split_action(update, context)
        return
    elif query.data.startswith('optimize_'):
        await handle_optimize_action(update, context)
        return

    action = query.data.replace('action_', '')

    if user_id not in user_data or 'file_path' not in user_data[user_id]:
        await query.edit_message_text("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —Å–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞.")
        return

    file_path = user_data[user_id]['file_path']

    if action == 'send':
        await handle_send_action(query, context, user_id, file_path)
    elif action == 'send_as_file':
        await handle_send_as_file_action(query, context, user_id, file_path)
    elif action == 'move':
        await handle_move_action(query, context, user_id, file_path)
    elif action == 'delete':
        await handle_delete_action(query, context, user_id, file_path)


async def schedule_file_deletion(user_id: int, file_path: str, delay: int):
    """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞"""
    await asyncio.sleep(delay)

    try:
        if os.path.exists(file_path):
            os.remove(file_path)
            logger.info(f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω —Ñ–∞–π–ª: {file_path}")

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ —Å–µ—Å—Å–∏—è –∞–∫—Ç–∏–≤–Ω–∞
            if user_id in user_data and user_data[user_id].get('file_path') == file_path:
                try:
                    await Application.builder().token(BOT_TOKEN).build().bot.send_message(
                        chat_id=user_id,
                        text="üóëÔ∏è –§–∞–π–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω —Å —Å–µ—Ä–≤–µ—Ä–∞ (—á–µ—Ä–µ–∑ 1 —á–∞—Å)"
                    )
                except:
                    pass
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è: {e}")


async def cleanup_old_files():
    """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    download_base = "/home/taras/video_downloads"
    if os.path.exists(download_base):
        for user_dir in os.listdir(download_base):
            user_path = os.path.join(download_base, user_dir)
            if os.path.isdir(user_path):
                try:
                    # –£–¥–∞–ª—è–µ–º –ø–∞–ø–∫–∏ —Å—Ç–∞—Ä—à–µ 2 —á–∞—Å–æ–≤
                    if os.path.getctime(user_path) < (time.time() - 7200):
                        shutil.rmtree(user_path)
                        logger.info(f"–£–¥–∞–ª–µ–Ω–∞ —Å—Ç–∞—Ä–∞—è –ø–∞–ø–∫–∞: {user_path}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ {user_path}: {e}")

    # –¢–∞–∫–∂–µ –æ—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —á–∞—Å—Ç–∏ —Ñ–∞–π–ª–æ–≤ –≤ saved_videos
    saved_base = "/home/torrent/download/youtube"
    if os.path.exists(saved_base):
        for item in os.listdir(saved_base):
            item_path = os.path.join(saved_base, item)
            try:
                # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã/–ø–∞–ø–∫–∏ —Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π
                if os.path.getctime(item_path) < (time.time() - 604800):
                    if os.path.isdir(item_path):
                        shutil.rmtree(item_path)
                    else:
                        os.remove(item_path)
                    logger.info(f"–£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª: {item_path}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ {item_path}: {e}")


async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"–û—à–∏–±–∫–∞: {context.error}")


def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –ø–∞–ø–∫–∏
    os.makedirs("/home/taras/video_downloads", exist_ok=True)
    os.makedirs("/home/torrent/download/youtube", exist_ok=True)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ ffmpeg –∏ ffprobe
    try:
        subprocess.run(["ffmpeg", "-version"], capture_output=True)
        subprocess.run(["ffprobe", "-version"], capture_output=True)
        logger.info("FFmpeg –∏ FFprobe –¥–æ—Å—Ç—É–ø–Ω—ã")
    except:
        logger.warning(
            "FFmpeg –∏–ª–∏ FFprobe –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏—Ö –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ–ª—å—à–∏–º–∏ —Ñ–∞–π–ª–∞–º–∏: sudo apt install ffmpeg")

    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã
    asyncio.run(cleanup_old_files())

    try:
        application = Application.builder().token(BOT_TOKEN).build()

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(CommandHandler("start", start_command))
        application.add_handler(CommandHandler("help", help_command))
        application.add_handler(CommandHandler("platforms", platforms_command))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_video_url))
        application.add_handler(CallbackQueryHandler(handle_quality_selection, pattern="^quality_"))
        application.add_handler(
            CallbackQueryHandler(handle_post_download_actions, pattern="^(action_|split_|optimize_)"))

        application.add_error_handler(error_handler)

        logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        application.run_polling()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")


if __name__ == "__main__":
    main()