#!/usr/bin/env python3
import os
import logging
import subprocess
import shutil
import asyncio
import time
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler

#—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤
from dotenv import load_dotenv

#–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞
load_dotenv()
token = os.getenv('TOKEN')
admin_id = os.getenv('ADMIN_ID')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
BOT_TOKEN = token

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è - –ò–°–ü–†–ê–í–õ–ï–ù–ê –û–ü–ï–ß–ê–¢–ö–ê
# logging.basicConfig(
#     format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',  # asctime –≤–º–µ—Å—Ç–æ asctasctime
#     level=logging.INFO
# )
logger = logging.getLogger(__name__)

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}


async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await update.message.reply_text(
        "ü§ñ –ë–æ—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ\n\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ!\n"
        "–Ø –ø—Ä–µ–¥–ª–æ–∂—É –≤—ã–±—Ä–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ, –∞ –ø–æ—Å–ª–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª –≤ Telegram"
    )


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    await update.message.reply_text(
        "üìñ –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞:\n\n"
        "1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ\n"
        "2. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö\n"
        "3. –î–æ–∂–¥–∏—Ç–µ—Å—å —Å–∫–∞—á–∏–≤–∞–Ω–∏—è\n"
        "4. –ü–æ—Å–ª–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –º–æ–∂–µ—Ç–µ:\n"
        "   ‚Ä¢ üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª –≤ Telegram\n"
        "   ‚Ä¢ üìÅ –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≤ –¥—Ä—É–≥—É—é –ø–∞–ø–∫—É\n"
        "   ‚Ä¢ üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª —Å —Å–µ—Ä–≤–µ—Ä–∞\n\n"
        "–§–∞–π–ª—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è—é—Ç—Å—è —á–µ—Ä–µ–∑ 1 —á–∞—Å"
    )


async def handle_video_url(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Å—ã–ª–æ–∫ –Ω–∞ –≤–∏–¥–µ–æ"""
    url = update.message.text.strip()
    user_id = update.message.from_user.id

    print(f"User {user_id} requested: {url}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å—Å—ã–ª–∫–∞
    if not url.startswith(('http://', 'https://')):
        await update.message.reply_text("‚ùå –≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å—Å—ã–ª–∫—É. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL.")
        return

    # –ú–µ–Ω—è–µ–º vkvideo.ru -> vk.com
    if 'vkvideo.ru' in url:
        url = url.replace('vkvideo.ru', 'vk.com')

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º URL –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data[user_id] = {'url': url, 'step': 'quality_selection'}

    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ
    keyboard = [
        [
            InlineKeyboardButton("üé• –õ—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ", callback_data="quality_best"),
            InlineKeyboardButton("‚öñÔ∏è –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ", callback_data="quality_720")
        ],
        [
            InlineKeyboardButton("üì± –î–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (480p)", callback_data="quality_480"),
            InlineKeyboardButton("üéµ –¢–æ–ª—å–∫–æ –∞—É–¥–∏–æ", callback_data="quality_audio")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "üé¨ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ:",
        reply_markup=reply_markup
    )


async def handle_quality_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—á–µ—Å—Ç–≤–∞"""
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    quality = query.data.replace('quality_', '')

    if user_id not in user_data:
        await query.edit_message_text("‚ùå –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –∑–∞–Ω–æ–≤–æ.")
        return

    url = user_data[user_id]['url']
    user_data[user_id]['quality'] = quality
    user_data[user_id]['step'] = 'downloading'

    await query.edit_message_text("‚è¨ –ù–∞—á–∏–Ω–∞—é —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ...")

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
    asyncio.create_task(download_video(user_id, url, quality, context))


async def download_video(user_id: int, url: str, quality: str, context: ContextTypes.DEFAULT_TYPE):
    """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ"""
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_dir = f"/home/taras/video_downloads/user_{user_id}"
        os.makedirs(user_dir, exist_ok=True)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
        quality_settings = {
            'best': 'bestvideo[height<=1080]+bestaudio/best[height<=1080]',
            '720': 'bestvideo[height<=720]+bestaudio/best[height<=720]',
            '480': 'bestvideo[height<=480]+bestaudio/best[height<=480]',
            'audio': 'bestaudio/best'
        }

        format_selection = quality_settings.get(quality, 'best')

        # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è yt-dlp
        cmd = [
            "yt-dlp",
            "-o", f"{user_dir}/%(title)s.%(ext)s",
            "-f", format_selection,
            "--no-warnings",
            url
        ]

        # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
        result = subprocess.run(cmd, capture_output=True, text=True, timeout=600)

        if result.returncode == 0:
            # –ò—â–µ–º —Å–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
            files = os.listdir(user_dir)
            if files:
                latest_file = max([os.path.join(user_dir, f) for f in files], key=os.path.getctime)

                user_data[user_id]['file_path'] = latest_file
                user_data[user_id]['step'] = 'downloaded'

                file_size = os.path.getsize(latest_file) / (1024 * 1024)
                file_name = os.path.basename(latest_file)

                # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ—Å–ª–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                keyboard = [
                    [
                        InlineKeyboardButton("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Telegram", callback_data="action_send"),
                        InlineKeyboardButton("üìÅ –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —Ñ–∞–π–ª –≤ –∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä", callback_data="action_move")
                    ],
                    [
                        InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª", callback_data="action_delete")
                    ]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)

                await context.bot.send_message(
                    chat_id=user_id,
                    text=f"‚úÖ –í–∏–¥–µ–æ —Å–∫–∞—á–∞–Ω–æ!\n\n"
                         f"üìÅ –§–∞–π–ª: `{file_name}`\n"
                         f"üìä –†–∞–∑–º–µ—Ä: {file_size:.2f} MB\n"
                         f"üíæ –ö–∞—á–µ—Å—Ç–≤–æ: {quality}\n\n"
                         f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    reply_markup=reply_markup,
                    parse_mode='Markdown'
                )

                # –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 1 —á–∞—Å
                asyncio.create_task(schedule_file_deletion(user_id, latest_file, 3600))
            else:
                await context.bot.send_message(
                    chat_id=user_id,
                    text="‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è"
                )
        else:
            error_msg = result.stderr if result.stderr else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
            await context.bot.send_message(
                chat_id=user_id,
                text=f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:\n`{error_msg}`",
                parse_mode='Markdown'
            )

    except subprocess.TimeoutExpired:
        await context.bot.send_message(
            chat_id=user_id,
            text="‚ùå –¢–∞–π–º–∞—É—Ç —Å–∫–∞—á–∏–≤–∞–Ω–∏—è (10 –º–∏–Ω—É—Ç)"
        )
    except Exception as e:
        await context.bot.send_message(
            chat_id=user_id,
            text=f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
        )


async def handle_post_download_actions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ—Å–ª–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è"""
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    action = query.data.replace('action_', '')

    if user_id not in user_data or 'file_path' not in user_data[user_id]:
        await query.edit_message_text("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —Å–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞.")
        return

    file_path = user_data[user_id]['file_path']

    if action == 'send':
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –≤ Telegram
        try:
            file_size = os.path.getsize(file_path) / (1024 * 1024 * 1024)  # GB

            if file_size > 2:  # Telegram limit ~2GB
                await query.edit_message_text(
                    f"‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram ({file_size:.2f} GB)\n"
                    f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–ø—Ü–∏—é '–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —Ñ–∞–π–ª'"
                )
            else:
                await query.edit_message_text("üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª...")

                with open(file_path, 'rb') as file:
                    await context.bot.send_document(
                        chat_id=user_id,
                        document=file,
                        filename=os.path.basename(file_path)
                    )

                await query.edit_message_text("‚úÖ –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")

        except Exception as e:
            await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {str(e)}")

    elif action == 'move':
        # –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        move_dir = "/home/taras/saved_videos"
        os.makedirs(move_dir, exist_ok=True)

        new_path = os.path.join(move_dir, os.path.basename(file_path))

        try:
            shutil.move(file_path, new_path)
            await query.edit_message_text(
                f"‚úÖ –§–∞–π–ª –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤:\n`{new_path}`",
                parse_mode='Markdown'
            )
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç—å –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_data[user_id]['file_path'] = new_path
        except Exception as e:
            await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è: {str(e)}")

    elif action == 'delete':
        # –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        try:
            os.remove(file_path)
            await query.edit_message_text("‚úÖ –§–∞–π–ª —É–¥–∞–ª–µ–Ω —Å —Å–µ—Ä–≤–µ—Ä–∞")
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if user_id in user_data:
                del user_data[user_id]
        except Exception as e:
            await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {str(e)}")


async def schedule_file_deletion(user_id: int, file_path: str, delay: int):
    """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞"""
    await asyncio.sleep(delay)

    try:
        if os.path.exists(file_path):
            os.remove(file_path)
            logger.info(f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω —Ñ–∞–π–ª: {file_path}")

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ —Å–µ—Å—Å–∏—è –∞–∫—Ç–∏–≤–Ω–∞
            if user_id in user_data and user_data[user_id].get('file_path') == file_path:
                await Application.builder().token(BOT_TOKEN).build().bot.send_message(
                    chat_id=user_id,
                    text="üóëÔ∏è –§–∞–π–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω —Å —Å–µ—Ä–≤–µ—Ä–∞ (—á–µ—Ä–µ–∑ 1 —á–∞—Å)"
                )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è: {e}")


async def cleanup_old_files():
    """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    download_base = "/home/taras/video_downloads"
    if os.path.exists(download_base):
        for user_dir in os.listdir(download_base):
            user_path = os.path.join(download_base, user_dir)
            if os.path.isdir(user_path):
                try:
                    # –£–¥–∞–ª—è–µ–º –ø–∞–ø–∫–∏ —Å—Ç–∞—Ä—à–µ 2 —á–∞—Å–æ–≤
                    if os.path.getctime(user_path) < (time.time() - 7200):
                        shutil.rmtree(user_path)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ {user_path}: {e}")


async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"–û—à–∏–±–∫–∞: {context.error}")


def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –ø–∞–ø–∫–∏
    os.makedirs("/home/taras/video_downloads", exist_ok=True)
    os.makedirs("/home/taras/saved_videos", exist_ok=True)

    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã
    asyncio.run(cleanup_old_files())

    try:
        application = Application.builder().token(BOT_TOKEN).build()

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(CommandHandler("start", start_command))
        application.add_handler(CommandHandler("help", help_command))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_video_url))
        application.add_handler(CallbackQueryHandler(handle_quality_selection, pattern="^quality_"))
        application.add_handler(CallbackQueryHandler(handle_post_download_actions, pattern="^action_"))

        application.add_error_handler(error_handler)

        logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        application.run_polling()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")


if __name__ == "__main__":
    main()